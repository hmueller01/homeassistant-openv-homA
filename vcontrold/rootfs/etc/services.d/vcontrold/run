#!/usr/bin/with-contenv bashio
# ==============================================================================
# Start the vcontrold service
# s6-overlay docs: https://github.com/just-containers/s6-overlay
# ==============================================================================

# Declare variables
declare config_tty
declare config_deviceid
declare config_systemid
declare config_device
declare config_room
declare config_area
declare config_areadeclare config_file_vito="/etc/vcontrold/vito.xml"
declare config_file_vcontrold="/etc/vcontrold/vcontrold.xml"
declare config_file_commands="/etc/vcontrold/commands.yaml"



# Fetch MQTT settings
source /etc/services.d/get_mqtt_settings.sh

# Fetch vcontrold settings
source /etc/services.d/get_vcontrold_settings.sh

# Get configuration options from user
config_tty=$(bashio::config 'tty')
config_deviceid=$(bashio::config 'device_id')
config_systemid=$(bashio::config 'homa_system_id')
config_device=$(bashio::config 'homa_device')
config_room=$(bashio::config 'homa_room')
config_area=$(bashio::config 'hass_area')

# Check if custom vito.xml file exists
if [ -f "/config/vcontrold/vito.xml" ]; then
    bashio::log.info "Using custom vito.xml file."
    config_file_vito="/config/vcontrold/vito.xml"
else
    bashio::log.info "Using default vito.xml file."
fi

# Check if custom vcontrold.xml file exists
if [ -f "/config/vcontrold/vcontrold.xml" ]; then
    bashio::log.info "Using custom vcontrold.xml file."
    config_file_vcontrold="/config/vcontrold/vcontrold.xml"
else
    bashio::log.info "Using default vcontrold.xml file."
fi

# Check if custom commands.yaml file exists
if [ -f "/config/vcontrold/commands.yaml" ]; then
    bashio::log.info "Using custom commands.yaml file."
    config_file_commands="/config/vcontrold/commands.yaml"
else
    bashio::log.info "Using default commands.yaml file."
fi
if [ ! -f "$config_file_commands" ]; then
    bashio::log.error "commands.yaml not found. Exit here."
    exit 1
fi


# Create HomA topic string with up to 3 levels of hierarchy
# /devices/$config_systemid/<section>[/<subsection>[/<subsubsection>]]
# Usage: get_topic <section> [<subsection>] [<subsubsection>]
# Requires globals: config_systemid
get_topic() {
    local section="$1"
    local subsection="${2:-}"
    local subsubsection="${3:-}"
    local base="/devices/$config_systemid"
    if [[ -n "$subsection" && -n "$subsubsection" ]]; then
        echo "$base/$section/$subsection/$subsubsection"
    elif [[ -n "$subsection" ]]; then
        echo "$base/$section/$subsection"
    else
        echo "$base/$section"
    fi
}

# Get the device name from the vito.xml file based on the device ID
# Usage: get_device_name_from_xml
# Requires globals: config_deviceid, config_file_vito
# returns: device name or "UNKNOWN" if not found
get_device_name_from_xml() {
    xmlstarlet sel -t -m "/vito/devices/device[@ID='$config_deviceid']" -v "@name" -n "$config_file_vito" || {
        bashio::log.error "Device ID '$config_deviceid' not found in XML file '$config_file_vito'."
        return "UNKNOWN"
    }
    #xmllint --xpath "string(/vito/devices/device[@ID='$config_deviceid']/@name)" "$config_file_vito"
}

# Publish a Home Assistant autoconfiguration message for a sensor
# Usage: homeassistant_config _<topic> _<class> [_<unit>] [_<template>]
# Note: Alwasy removes the leading underscore from parameters! Needed to avoid parameter shifting issues.
# Parameters:
# - topic: The MQTT topic for the sensor
# - class: The device class (e.g., temperature, power_factor, etc.)
# - unit: The unit of measurement (optional)
# - template: The value template for the sensor (optional)
# Requires globals: config_systemid, config_area, model_name
homeassistant_config() {
    local topic="${1#_}"  # Remove leading underscore
    local class="${2#_}"
    local unit="${3#_}"
    local template="${4#_}"

    # Required environment variables: config_systemid, config_area
    local object_id="${config_systemid}-${topic// /-}"
    local ha_topic="homeassistant/sensor/${object_id}/config"

    # Build base payload
    local payload
    payload=$(jq -n \
        --arg device_class "$class" \
        --arg state_topic "/devices/${config_systemid}/controls/${topic}" \
        --arg name "$topic" \
        --arg unique_id "$object_id" \
        --arg object_id "$object_id" \
        --arg identifier "$config_systemid" \
        --arg model "$model_name" \
        --arg area "$config_area" \
        '{
            device_class: $device_class,
            state_topic: $state_topic,
            name: $name,
            unique_id: $unique_id,
            object_id: $object_id,
            device: {
                identifiers: [$identifier],
                name: "Vcontrol",
                manufacturer: "Viesmann",
                model: $model,
                suggested_area: $area
            }
        }'
    )

    # Add state_class if needed
    if [[ "$class" == "temperature" || "$class" == "power_factor" ]]; then
        payload=$(echo "$payload" | jq '.state_class = "measurement"')
    fi

    # Special treatment for _int
    if [[ "$class" == "_int" ]]; then
        payload=$(echo "$payload" | jq 'del(.device_class) | .native_value = "int"')
    fi

    # Special treatment for _datetime
    if [[ "$class" == "_datetime" ]]; then
        payload=$(echo "$payload" | jq 'del(.device_class) | .value_template = "{{ as_datetime(value) }}" | .icon = "mdi:calendar-arrow-right"')
    fi

    # Set unit_of_measurement if available
    if [[ -n "$unit" ]]; then
        payload=$(echo "$payload" | jq --arg unit "$unit" '.unit_of_measurement = $unit')
    fi

    # Set value_template if available
    if [[ -n "$template" ]]; then
        payload=$(echo "$payload" | jq --arg template "$template" '.value_template = $template')
    fi

    # Publish to MQTT
    mosquitto_pub -h "$MQTT_HOST" -p "$MQTT_PORT" -u "$MQTT_USER" -P "$MQTT_PASSWORD" \
        -t "$ha_topic" -m "$payload" #-r
}

model_name=$(get_device_name_from_xml)

# Publish HomA room and device meta
mosquitto_pub -h "$MQTT_HOST" -p "$MQTT_PORT" -u "$MQTT_USER" -P "$MQTT_PASSWORD" \
    -t "$(get_topic meta/room)" -m "$config_room" #-r
mosquitto_pub -h "$MQTT_HOST" -p "$MQTT_PORT" -u "$MQTT_USER" -P "$MQTT_PASSWORD" \
    -t "$(get_topic meta/name)" -m "$config_device" #-r

# Cleanup old scripts
rm -f /etc/vcontrold/1_mqtt_commands.txt /etc/vcontrold/2_mqtt.tmpl || true
echo '#!/bin/sh' > /etc/vcontrold/2_mqtt.tmpl

# Parse commands.yaml file and generate mqtt template file
i=0
while IFS=$'\t' read -r cmd type topic class unit template; do
    ((i=i+1))
    cmd="${cmd#_}"  # Remove leading underscore
    type="${type#_}"
    topic="${topic#_}"
    class="${class#_}"
    unit="${unit#_}"
    template="${template#_}"
    if [[ -z "$cmd" ]]; then
         bashio::log.error "Command at index $i is empty. Please check your commands.yaml file."
        exit 1
    fi
    if [[ -z "$type" ]]; then
        bashio::log.warning "Type at index $i for command ${cmd} is not set. Defaulting to STRING."
        type="STRING"
    fi
    if [[ -z "$topic" ]]; then
        bashio::log.warning "Topic at index $i is not set. Defaulting to ${cmd}."
        topic="${cmd}"
    fi
    topic_tmpl=$(get_topic "controls" "$topic")

    bashio::log.info "Configuring command ${i}: ${cmd} with type ${type} using topic '${topic_tmpl}'"
    echo $cmd >> /etc/vcontrold/1_mqtt_commands.txt

    if [[ $type == "FLOAT" ]]; then
        payload='$'$i''
    elif [[ $type == "FLOAT1" ]]; then
        payload='$(printf "%.1f" "$'$i'")'
    elif [[ $type == "INT" ]]; then
        payload='$(printf "%.0f" "$'$i'")'
    elif [[ $type == "STRING" ]]; then
        payload='"$R'$i'"'
    else
        bashio::log.error "Unsupported type '${type}' for command ${cmd}. Supported types are FLOAT, INT, STRING."
        exit 1
    fi

    echo 'if [ "x$E'$i'" = "xOK" ]; then' >> /etc/vcontrold/2_mqtt.tmpl
    echo '  mosquitto_pub -h $MQTT_HOST -p $MQTT_PORT -u $MQTT_USER -P $MQTT_PASSWORD -t "'${topic_tmpl}'" -m '${payload}'' >> /etc/vcontrold/2_mqtt.tmpl
    echo 'fi' >> /etc/vcontrold/2_mqtt.tmpl

    # Publish meta information for HomA integration
    mosquitto_pub -h "$MQTT_HOST" -p "$MQTT_PORT" -u "$MQTT_USER" -P "$MQTT_PASSWORD" \
        -t "$(get_topic controls "$topic" meta/type)" -m "text" #-r
    mosquitto_pub -h "$MQTT_HOST" -p "$MQTT_PORT" -u "$MQTT_USER" -P "$MQTT_PASSWORD" \
        -t "$(get_topic controls "$topic" meta/order)" -m "$i" #-r
    # Set unit if available
    if [[ -n "${unit}" ]]; then
        mosquitto_pub -h "$MQTT_HOST" -p "$MQTT_PORT" -u "$MQTT_USER" -P "$MQTT_PASSWORD" \
            -t "$(get_topic controls "$topic" meta/unit)" -m " $unit" #-r
    else
        mosquitto_pub -h "$MQTT_HOST" -p "$MQTT_PORT" -u "$MQTT_USER" -P "$MQTT_PASSWORD" \
            -t "$(get_topic controls "$topic" meta/unit)" -m "" #-r
    fi

    # Publish Home Assistant autoconfiguration message
    homeassistant_config "_$topic" "_$class" "_$unit" "_$template"
done < <(yq -r '.commands[] | "_" +
    (.command // "") + "\t_" +
    (.type // "") + "\t_" +
    (.topic // "") + "\t_" +
    (.class // "") + "\t_" +
    (.unit // "") + "\t_" +
    (.template // "")' "$config_file_commands")
    # needs a leading underscore to avoid parameter shifting issues

# Configure vcontrold.xml with the user-specified values
sed -i "s/#DEVICEID#/$config_deviceid/g" "$config_file_vcontrold"
sed -i "s|#VITOXML#|$config_file_vito|g" "$config_file_vcontrold"

# Enable or disable debug mode based on user configuration
if bashio::config.true 'debug'; then
    sed -i "s/#DEBUG#/y/g" "$config_file_vcontrold"
else
    sed -i "s/#DEBUG#/n/g" "$config_file_vcontrold"
fi

# Start the vcontrold service or a dummy process for external control
if [ "$VCONTROL_HOST" = "localhost" ]; then
    bashio::log.info "Starting local vcontrold..."
    exec /usr/sbin/vcontrold -x "$config_file_vcontrold" -n -U root -d "$config_tty"
else
    bashio::log.info "vcontrold is not running locally. Keeping process alive."
    tail -f /dev/null
fi
