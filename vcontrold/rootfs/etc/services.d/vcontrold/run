#!/usr/bin/with-contenv bashio
# ==============================================================================
# Start the vcontrold service
# s6-overlay docs: https://github.com/just-containers/s6-overlay
# ==============================================================================

# Declare variables
declare config_deviceid
declare config_commands
declare config_tty
declare config_file_vito="vito.xml"
declare config_file_vcontrold="/etc/vcontrold/vcontrold.xml"
declare config_file_commands="/etc/vcontrold/commands.yaml"

# Fetch Vcontrold settings
source /etc/services.d/get_vcontrold_settings.sh

# Get configuration options from user
config_tty=$(bashio::config 'tty')
config_deviceid=$(bashio::config 'device_id')
#config_commands=$(bashio::config 'commands')

# Check if custom vito.xml file exists
if [ -f "/config/vcontrold/vito.xml" ]; then
    bashio::log.info "Using custom vito.xml file."
    config_file_vito="/config/vcontrold/vito.xml"
else
    bashio::log.info "Using default vito.xml file."
fi

# Check if custom vcontrold.xml file exists
if [ -f "/config/vcontrold/vcontrold.xml" ]; then
    bashio::log.info "Using custom vcontrold.xml file."
    config_file_vcontrold="/config/vcontrold/vcontrold.xml"
else
    bashio::log.info "Using default vcontrold.xml file."
fi

# Check if custom commands.yaml file exists
if [ -f "/config/vcontrold/commands.yaml" ]; then
    bashio::log.info "Using custom commands.yaml file."
    config_file_commands="/config/vcontrold/commands.yaml"
else
    bashio::log.info "Using default commands.yaml file."
fi
if [ ! -f "$config_file_commands" ]; then
    bashio::log.error "commands.yaml not found. Exit here."
    exit 1
fi

# Cleanup old scripts
rm -f /etc/vcontrold/1_mqtt_commands.txt /etc/vcontrold/2_mqtt.tmpl || true
echo '#!/bin/sh' > /etc/vcontrold/2_mqtt.tmpl

# Parse commands.yaml file and generate mqtt template file
i=0
while IFS=$'\t' read -r cmd type topic; do
    ((i=i+1))
    if [[ -z "$cmd" ]]; then
         bashio::log.error "Command at index $i is empty. Please check your commands.yaml file."
        exit 1
    fi
    if [[ -z "$type" ]]; then
        bashio::log.warning "Type at index $i for command ${cmd} is not set. Defaulting to STRING."
        type="STRING"
    fi
    if [[ -z "$topic" ]]; then
        bashio::log.warning "Topic at index $i is not set. Defaulting to ${cmd}."
        topic="${cmd}"
    fi
    topic='/devices/$MQTT_TOPIC/controls/'${topic}''

    bashio::log.info "Configuring command ${i}: ${cmd} with type ${type} using topic '${topic}'"
    echo $cmd >> /etc/vcontrold/1_mqtt_commands.txt

    if [[ $type == "FLOAT" ]]; then
        payload='$(printf "%.1f" "$'$i'")'
    elif [[ $type == "INT" ]]; then
        payload='$(printf "%.0f" "$'$i'")'
    elif [[ $type == "STRING" ]]; then
        payload='"$R'$i'"'
    else
        bashio::log.error "Unsupported type '${type}' for command ${cmd}. Supported types are FLOAT, INT, STRING."
        exit 1
    fi

    echo 'if [ "x$E'$i'" = "xOK" ]; then' >> /etc/vcontrold/2_mqtt.tmpl
    echo '  mosquitto_pub -h $MQTT_HOST -p $MQTT_PORT -u $MQTT_USER -P $MQTT_PASSWORD -t "'${topic}'" -m '${payload}'' >> /etc/vcontrold/2_mqtt.tmpl
    echo 'fi' >> /etc/vcontrold/2_mqtt.tmpl
done < <(yq -r '.commands[] | [.command, .type, .topic] | @tsv' "$config_file_commands")

# Configure vcontrold.xml with the user-specified values
sed -i "s/#DEVICEID#/$config_deviceid/g" "$config_file_vcontrold"
sed -i "s|#VITOXML#|$config_file_vito|g" "$config_file_vcontrold"

# Enable or disable debug mode based on user configuration
if bashio::config.true 'debug'; then
    sed -i "s/#DEBUG#/y/g" "$config_file_vcontrold"
else
    sed -i "s/#DEBUG#/n/g" "$config_file_vcontrold"
fi

# Start the vcontrold service or a dummy process for external control
if [ "$VCONTROL_HOST" = "localhost" ]; then
    bashio::log.info "Starting local vcontrold..."
    exec /usr/sbin/vcontrold -x "$config_file_vcontrold" -n -U root -d "$config_tty"
else
    bashio::log.info "vcontrold is not running locally. Keeping process alive."
    tail -f /dev/null
fi
